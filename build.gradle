import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://argoden.com:82/repository/unstable" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.6"
        classpath "net.saliman:gradle-cobertura-plugin:2.5.3"
        classpath 'org.codenarc:CodeNarc:1.1'
        classpath "com.bmuschko:gradle-docker-plugin:3.2.1"
    }
}

version "0.1"
group "skelapp"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"com.energizedwork.idea-project-components"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "codenarc"
apply plugin: "net.saliman.cobertura"
apply plugin: "com.bmuschko.docker-remote-api"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven {
        url "http://nexus.argoden.com:82/repository/unstable/"
        credentials {
            username "$argodenUser"
            password "$argodenPassword"
        }
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.6"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-api:3.6.0"

    // New
    compile 'org.grails.plugins:grails-console:2.1.1'
    runtime 'mysql:mysql-connector-java:5.1.33'

    compile "com.argoden.plugins:SeedPlugin:0.0.2"
    compile "com.argoden.plugins:EncryptPlugin:0.0.1"
}

bootRun {
    systemProperty 'server.port', '9900'
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

webdriverBinaries {
    chromedriver '2.32'
    geckodriver '0.18.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

cobertura {
    coverageFormats = ['html', 'xml']
    // Exclude grails framework files
    coverageExcludes = ['.*.Application.*','.*.BootStrap.*','.*.UrlMappings.*', '.*GrailsPlugin.*']
}

codenarcMain {
    configFile = file("$project.projectDir/src/codenarc/main.groovy")
    ignoreFailures = false
    excludes = ['**/Application.*','**/BootStrap.*','**/UrlMappings.*', '**/GrailsPlugin.*']
}

codenarcTest {
    configFile = file("$project.projectDir/src/codenarc/test.groovy")
    ignoreFailures = false
}

codenarcIntegrationTest {
    configFile = file("$project.projectDir/src/codenarc/test.groovy")
    ignoreFailures = false
}

assets {
    minifyJs = true
    minifyCss = true
}

// Docker

docker {
    registryCredentials {
        url = "http://nexus.argoden.com:5003/develop"
        username = "$argodenUser"
        password = "$argodenPassword"
    }
}

ext {
    dockerBuildDir = mkdir("${buildDir}/docker")
    dockerImageName = "${project.name}".toLowerCase()
    dockerLatestImageName = "$nexusRepository$dockerImageName".toLowerCase()
    dockerLatestImageName = "$dockerImageName".toLowerCase()
    dockerVersionImageName = "$dockerLatestImageName:${project.version}".toLowerCase()
}

task prepareSeed(type: Copy, dependsOn: assemble){
    group = 'Docker'

    from 'src/seed/'
    into "$dockerBuildDir/seed"
}


task prepareBuild(type: Copy, dependsOn: prepareSeed) {
    group = 'Docker'

    from 'src/docker'
    from project.jar

    into dockerBuildDir
}

task buildImage(type: DockerBuildImage, dependsOn: prepareBuild) {
    group = 'Docker'

    inputDir = file(dockerBuildDir)
    tags = [ dockerLatestImageName, dockerVersionImageName ]
}

task publishVersionImage(type: DockerPushImage, dependsOn: buildImage) {
    group = 'Docker'

    imageName = dockerVersionImageName
}

task publishLatestImage(type: DockerPushImage, dependsOn: publishVersionImage) {
    group = 'Docker'

    imageName = dockerLatestImageName
}

task removeImages(type: DockerListImages) {
    group = 'Docker'

    imageName = dockerVersionImageName

    onNext { image ->

        if (image.id) {
            task remove(type: DockerRemoveImage) {
                imageId = image.id[0] - 'sha256:'
                force = true
            }
            tasks.remove.execute()
        }
    }
}

task createContainer(type: DockerCreateContainer) {
    group = 'Docker'
    env = ['GRAILS_ENV=docker']
    imageId = dockerImageName
    containerName = dockerImageName
    hostName = dockerImageName
    network = 'bric-tps'
    portBindings = ['9900:80']
}

task startContainer(type: DockerStartContainer) {
    group = 'Docker'
    containerId = dockerImageName
}

task runContainer(type: GradleBuild) {
    group = 'Docker'

    tasks = ['createContainer', 'startContainer']
}

task stopContainer(type: DockerStopContainer) {
    group = 'Docker'

    containerId = dockerImageName
}

task killContainer(type: DockerKillContainer) {
    group = 'Docker'

    containerId = dockerImageName
}

task removeContainer(type: DockerRemoveContainer) {
    group = 'Docker'

    containerId = dockerImageName
}